Perfect—here’s a tightened tutorial tailored for someone who already has pyRevit and your extension set up. It focuses on what the tool does, how to run it, how to read the results, and a few power-user tweaks. No install/uninstall fluff.

Phase Filter Comparison — Quick Tutorial

What it does (in one minute)

This tool compares Phase Filters in your host model against each loaded Revit link and reports:
	•	A complete table of the host Phase Filters and their settings.
	•	For each link:
	•	A table of its Phase Filters (filters with setting differences get a ❌ after the name).
	•	Lists of Missing in Link (host has it; link doesn’t) and Extra in Link (link has it; host doesn’t).
	•	A Setting Mismatches table showing exactly which column differs and what the two values are.

It auto-adapts to Revit API differences by trying both the modern enum-based API and legacy boolean API.

⸻

How to run
	1.	Open your project with at least one loaded Revit link.
	2.	Click your pyRevit button for Phase Filter Comparison.
	3.	Read the output in the pyRevit Output panel:
	•	Host Phase Filters (N)
	•	Per-link sections with:
	•	Link Filters (look for ❌ after names)
	•	Missing in Link / Extra in Link
	•	Mismatched Properties

If there are no loaded links, you’ll get:

No loaded Revit links found in this model.

⸻

Reading the output (fast)
	•	Host table = source of truth.
	•	Link Filters = what that link currently has.
	•	❌ appended to a filter name means at least one of the columns differs from the host.
	•	Missing in Link = copy/add these in the link to match standards.
	•	Extra in Link = consider renaming/removing to align with the host.
	•	Setting Mismatches = pinpoint which column(s) differ (New, Existing, Demolished, Temporary) and the two values.

Values may appear as enum presentations (e.g., a “Show/Hide/ByCategory”-style label) on newer Revit, or True/False with legacy calls. If a value can’t be read, you’ll see N/A.

⸻

Typical workflows

Enforce firm standards
	•	Open your coordination model (with links loaded).
	•	Run the tool; fix anything with ❌, Missing, or Extra in the consultant links.

Preflight check before issue
	•	Run the tool.
	•	If no ❌ and no Missing/Extra for all links, you’re aligned.

⸻

Troubleshooting

No links reported
	•	Ensure links are loaded (Manage > Manage Links). The tool skips unloaded or missing links.

Many N/A values
	•	The script gracefully falls back across Revit API versions. N/A just means Revit didn’t return that property for that model/version. Verify the link actually defines Phase Filters (Manage > Phasing > Phase Filters).

A filter shows ❌ but the two visible tables “look” the same
	•	Enum vs boolean representations can look similar but compare differently as strings. See “Normalize values” below for a stricter normalization approach.

⸻

Power tweaks (optional)

1) Normalize values for rock-solid comparisons

Drop this helper into the script (near the other helpers) and use it in comparisons and when printing. It harmonizes enums/booleans into consistent labels:

def normalize_status(val):
    # Map modern enum presentations or booleans into canonical strings.
    if val is None:
        return "N/A"
    s = str(val).strip()

    # Common enum/label harmonization (customize as needed)
    canonical = {
        "Show": "SHOW",
        "Hide": "HIDE",
        "ByCategory": "BY_CATEGORY",
        "By View": "BY_VIEW",
        "ByView": "BY_VIEW",
        "True": "SHOW",
        "False": "HIDE",
        "N/A": "N/A",
    }
    # Direct match
    if s in canonical:
        return canonical[s]

    # Heuristics: contain checks for variants
    up = s.upper()
    if "BY" in up and "CATEGORY" in up:
        return "BY_CATEGORY"
    if "BY" in up and "VIEW" in up:
        return "BY_VIEW"
    if "SHOW" in up or "VISIBLE" in up:
        return "SHOW"
    if "HIDE" in up or "HIDDEN" in up:
        return "HIDE"
    return up

Then in compare_phase_filters(...), change:

if str(hv) != str(lv):
    diffs.append((fname, colname, hv, lv))

to:

nh, nl = normalize_status(hv), normalize_status(lv)
if nh != nl:
    diffs.append((fname, colname, nh, nl))

And when building table rows, wrap with normalize_status(...) instead of sanitize(...) if you want the normalized displays throughout.

⸻

2) “Only show mismatches” quick filter

If you want the link table to only list filters that differ from the host, replace the link table loop with:

mismatch_names = {fname for (fname, _, _, _) in diffs}
link_rows = []
for n, v in sorted(link_map.items(), key=lambda kv: kv[0].lower()):
    if n not in mismatch_names:
        continue
    display_name = u"{} ❌".format(n)
    link_rows.append([
        display_name,
        sanitize(v["New"]), sanitize(v["Existing"]), sanitize(v["Demolished"]), sanitize(v["Temporary"])
    ])


⸻

3) One-click CSV export (per-link diffs)

Add this right after the “Mismatched Properties” table is printed:

import os, csv, tempfile
if diffs:
    csv_path = os.path.join(tempfile.gettempdir(), "phase_filter_mismatches_{}.csv".format(link_name.replace(" ", "_")))
    with open(csv_path, "w", newline="") as f:
        writer = csv.writer(f)
        writer.writerow(["Filter", "Column", "Host", "Link"])
        for fname, col, hv, lv in diffs:
            writer.writerow([fname, col, sanitize(hv), sanitize(lv)])
    output_window.print_md("**Export:** [{}]({})".format(os.path.basename(csv_path), csv_path))

Users can click the link in the pyRevit output to open the CSV.

⸻

Design notes (what’s happening under the hood)
	•	The script builds {filter_name: {New, Existing, Demolished, Temporary}} maps for the host and each link.
	•	It first tries GetPhaseStatusPresentation(ElementOnPhaseStatus.X); if unavailable, it falls back to legacy ShowX calls.
	•	It computes:
	•	Missing/Extra via set diffs on names.
	•	Mismatches via per-column comparisons for overlapping names.
	•	It marks link filters with ❌ if any column differs from the host.

⸻

If you want, I can bake in the normalizer + an “Only show mismatches” toggle (UI) and the CSV export so your team can use those without touching code.